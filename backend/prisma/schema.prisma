// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AnswerEnum {
  A
  B
  C
  D
  E
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Quiz {
  id          String     @id @default(uuid())
  title       String     @unique
  description String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  Question    Question[]
  Token       Token[]
}

model Question {
  id            String         @id @default(uuid())
  quiz          Quiz           @relation(fields: [quiz_id], references: [id])
  quiz_id       String
  content       String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  response      Response[]
  answer_option AnswerOption[]
}

model AnswerOption {
  id          String     @id @default(uuid())
  question    Question   @relation(fields: [question_id], references: [id])
  question_id String
  content     String
  label       AnswerEnum
  is_correct  Boolean
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  response    Response[]
}

model Token {
  id          String        @id @default(uuid())
  quiz        Quiz          @relation(fields: [quiz_id], references: [id])
  quiz_id     String
  code        String        @unique
  expires_at  DateTime
  created_at  DateTime      @default(now())
  participant Participant[]
}

model Participant {
  id           String     @id @default(uuid())
  token        Token      @relation(fields: [token_id], references: [id])
  token_id     String
  name         String
  started_at   DateTime   @default(now())
  completed_at DateTime
  response     Response[]
}

model Response {
  id               String       @id @default(uuid())
  question         Question     @relation(fields: [question_id], references: [id])
  question_id      String
  participant      Participant  @relation(fields: [participant_id], references: [id])
  participant_id   String
  answer_option    AnswerOption @relation(fields: [answer_option_id], references: [id])
  answer_option_id String
  created_at       DateTime     @default(now())
}
